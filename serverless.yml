service: flaker-api

provider:
  name: aws
  runtime: python3.8
  memorySize: 1024 # MB. While the faker invocation only consumes around 75MB, lowering the memory reduces the CPU allocation which is undesirable
  timeout: 300 # 5 mins
  region: ${opt:region}
  resourcePolicy:
    - Effect: Allow
      Principal: 
        AWS:
          - Fn::Join:
            - ''
            - - 'arn:aws:sts::'
              - Ref: 'AWS::AccountId'
              - ':assumed-role/'
              - Ref: ${self:custom.external_function_role}
              - '/snowflake'
      Action: execute-api:Invoke
      Resource:
        - execute-api:/*/*/*

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters

custom:
  aws_account_id: "#{AWS::AccountId}"
  snowflake_user_arn: ${opt:snowflake_user_arn,'*'}
  snowflake_external_id: ${opt:snowflake_external_id,'*'}
  external_function_role: SnowflakeExternalFunctionExecutionRole

functions:
  fake:
    handler: flaker.fake
    events:
      - http:
          path: /
          method: post
          authorizer: aws_iam

resources:
  Resources:
    SnowflakeExternalFunctionExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                AWS:
                  - ${self:custom.snowflake_user_arn}
              Action:
                - "sts:AssumeRole"
              Condition: {"StringEquals": { "sts:ExternalId": "${self:custom.snowflake_external_id}" }}
        RoleName: ${self:custom.external_function_role}
        Path: "/"
  Outputs:
    SnowflakeExternalFunctionRole:
      Value: !GetAtt SnowflakeExternalFunctionExecutionRole.Arn